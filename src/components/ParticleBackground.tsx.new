'use client';

import React, { useEffect, useRef } from 'react';
import { useTheme } from 'next-themes';

// For nodes in our diagram background
interface DiagramNode {
  x: number;
  y: number;
  size: number;
  type: 'circle' | 'diamond' | 'rect' | 'hexagon';
  color: string;
  connections: number[];
  angle: number;
  speed: number;
  label?: string;
  isVisible: boolean; // For sequential animation
}

// For animating connections
interface AnimatingConnection {
  fromNodeIndex: number;
  toNodeIndex: number;
  progress: number; // 0 to 1, where 1 means fully drawn
  startTime: number;
}

const ParticleBackground: React.FC = () => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const { resolvedTheme } = useTheme();
  
  const nodesRef = useRef<DiagramNode[]>([]);
  const mousePositionRef = useRef({ x: 0, y: 0 });
  const animationFrameRef = useRef<number | null>(null);
  const timeRef = useRef<number>(0);
  
  // For sequential build animation
  const sequenceIndexRef = useRef<number>(0);
  const nodeSequenceRef = useRef<number[]>([]);
  const currentAnimatingConnectionRef = useRef<AnimatingConnection | null>(null);
  const buildStartTimeRef = useRef<number>(0);
  const nodeBuildDelayMs = 1200; // Delay between adding nodes
  const connectionAnimDurationMs = 800; // Time to animate a connection

  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Set canvas to full window size
    const handleResize = () => {
      if (canvas) {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        initDiagramNodes();
      }
    };

    const initDiagramNodes = () => {
      // Reset animation state
      sequenceIndexRef.current = 0;
      currentAnimatingConnectionRef.current = null;
      buildStartTimeRef.current = Date.now();
      
      // Create a diagram-like network with nodes
      const numNodes = Math.floor((canvas.width * canvas.height) / 30000); // Even fewer nodes for clarity
      const nodes: DiagramNode[] = [];

      const isDark = resolvedTheme === 'dark';
      const nodeColors = isDark 
        ? ['rgba(228, 217, 255, 0.35)', 'rgba(136, 150, 171, 0.35)', 'rgba(112, 129, 186, 0.35)', 'rgba(39, 52, 105, 0.35)']
        : ['rgba(48, 52, 63, 0.3)', 'rgba(39, 52, 105, 0.3)', 'rgba(84, 97, 167, 0.3)', 'rgba(136, 150, 171, 0.3)'];
      
      const nodeTypes: ('circle' | 'diamond' | 'rect' | 'hexagon')[] = ['circle', 'diamond', 'rect', 'hexagon'];
      
      // Generate diagram nodes
      for (let i = 0; i < numNodes; i++) {
        // Create a grid-like initial position with some randomness
        const gridSize = Math.sqrt(numNodes) + 1;
        const gridX = i % gridSize;
        const gridY = Math.floor(i / gridSize);
        
        const x = (gridX / gridSize) * canvas.width * 0.8 + canvas.width * 0.1 + (Math.random() - 0.5) * 100;
        const y = (gridY / gridSize) * canvas.height * 0.8 + canvas.height * 0.1 + (Math.random() - 0.5) * 100;
        
        nodes.push({
          x,
          y,
          size: 6 + Math.random() * 12, // Smaller nodes for tighter spacing
          type: nodeTypes[Math.floor(Math.random() * nodeTypes.length)],
          color: nodeColors[Math.floor(Math.random() * nodeColors.length)],
          connections: [],
          angle: Math.random() * Math.PI * 2,
          speed: 0.2 + Math.random() * 0.3,
          label: ['Start', 'Process', 'Decision', 'End', 'Data', 'Input'][Math.floor(Math.random() * 6)],
          isVisible: false // All nodes start invisible
        });
      }
      
      // Fill the entire canvas with nodes
      const cornerNodes = [
        { x: 0, y: 0 },
        { x: canvas.width, y: 0 },
        { x: 0, y: canvas.height },
        { x: canvas.width, y: canvas.height },
        { x: canvas.width/2, y: 0 },
        { x: canvas.width/2, y: canvas.height },
        { x: 0, y: canvas.height/2 },
        { x: canvas.width, y: canvas.height/2 },
      ];
      
      // Create node connections and build a network structure
      // We'll create a minimum spanning tree first to ensure connectivity
      const connectedSets: Set<number>[] = [];
      for (let i = 0; i < nodes.length; i++) {
        connectedSets.push(new Set([i]));
      }
      
      // First, make the first node visible to start our sequence
      nodes[0].isVisible = true;
      
      // Create a sequence to add nodes one by one
      const nodeSequence: number[] = [0]; // Start with node 0
      
      for (let i = 1; i < nodes.length; i++) {
        // Find the closest visible node
        const closestNodeIndex = findClosestUnvisitedNode(nodeSequence[nodeSequence.length - 1]);
        nodeSequence.push(closestNodeIndex);
      }
      
      // Helper function to find closest unvisited node
      function findClosestUnvisitedNode(fromNodeIndex: number): number {
        const fromNode = nodes[fromNodeIndex];
        let closestNode = -1;
        let closestDistance = Number.MAX_VALUE;
        
        for (let i = 0; i < nodes.length; i++) {
          if (!nodes[i].isVisible && i !== fromNodeIndex) {
            const dx = fromNode.x - nodes[i].x;
            const dy = fromNode.y - nodes[i].y;
            const distance = Math.sqrt(dx * dx + dy * dy);
            
            if (distance < closestDistance) {
              closestDistance = distance;
              closestNode = i;
            }
          }
        }
        
        // If no unvisited node found, return any node
        return closestNode !== -1 ? closestNode : Math.floor(Math.random() * nodes.length);
      }
      
      // Store the nodes and sequence for later use
      nodesRef.current = nodes;
      nodeSequenceRef.current = nodeSequence;
    };

    const drawDiagram = () => {
      const canvas = canvasRef.current;
      const ctx = canvas?.getContext('2d');
      const nodes = nodesRef.current;
      if (!canvas || !ctx || !nodes) return;
      
      const isDark = resolvedTheme === 'dark';
      
      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Draw grid background
      const gridSize = 30;
      ctx.strokeStyle = isDark ? 'rgba(228, 217, 255, 0.06)' : 'rgba(39, 52, 105, 0.06)';
      ctx.lineWidth = 1;
      
      // Draw grid pattern
      const drawGridPattern = () => {
        const gridSize = 30;
        const gridColor = isDark ? 'rgba(228, 217, 255, 0.03)' : 'rgba(39, 52, 105, 0.03)';
        
        ctx.strokeStyle = gridColor;
        ctx.lineWidth = 0.5;
        
        // Draw vertical lines
        for (let x = 0; x < canvas.width; x += gridSize) {
          ctx.beginPath();
          ctx.moveTo(x, 0);
          ctx.lineTo(x, canvas.height);
          ctx.stroke();
        }
        
        // Draw horizontal lines
        for (let y = 0; y < canvas.height; y += gridSize) {
          ctx.beginPath();
          ctx.moveTo(0, y);
          ctx.lineTo(canvas.width, y);
          ctx.stroke();
        }
      };
      
      drawGridPattern();
      
      // Helper function to draw connection with animated progress
      const drawConnection = (fromIndex: number, toIndex: number, progress: number) => {
        const fromNode = nodes[fromIndex];
        const toNode = nodes[toIndex];
        
        // Start coordinates
        const startX = fromNode.x;
        const startY = fromNode.y;
        
        // End coordinates (either full distance or partial based on progress)
        const endX = startX + (toNode.x - startX) * progress;
        const endY = startY + (toNode.y - startY) * progress;
        
        // Calculate control point for curve
        const dist = Math.sqrt(Math.pow(toNode.x - startX, 2) + Math.pow(toNode.y - startY, 2));
        const controlOffsetX = Math.sin(timeRef.current + fromIndex) * 15;
        const controlOffsetY = Math.cos(timeRef.current + fromIndex) * 15;
        const controlPointX = (startX + toNode.x) / 2 + controlOffsetX;
        const controlPointY = (startY + toNode.y) / 2 + controlOffsetY;
        
        // Set connection color
        ctx.strokeStyle = isDark 
          ? 'rgba(255, 255, 255, 0.1)' 
          : 'rgba(39, 52, 105, 0.1)';
        ctx.lineWidth = 1.2;
        
        // Draw the curved line
        ctx.beginPath();
        ctx.moveTo(startX, startY);
        ctx.quadraticCurveTo(controlPointX, controlPointY, endX, endY);
        ctx.stroke();
        
        // If connection is complete, draw arrow tip
        if (progress >= 0.98) {
          const angle = Math.atan2(endY - controlPointY, endX - controlPointX);
          const arrowLength = 10;
          
          ctx.beginPath();
          ctx.moveTo(endX, endY);
          ctx.lineTo(
            endX - arrowLength * Math.cos(angle - Math.PI/6),
            endY - arrowLength * Math.sin(angle - Math.PI/6)
          );
          ctx.lineTo(
            endX - arrowLength * Math.cos(angle + Math.PI/6),
            endY - arrowLength * Math.sin(angle + Math.PI/6)
          );
          ctx.fillStyle = isDark ? 'rgba(228, 217, 255, 0.3)' : 'rgba(39, 52, 105, 0.3)';
          ctx.fill();
        }
      };
      
      // Draw visible connections
      nodes.forEach((node: DiagramNode, fromIndex: number) => {
        // Only draw connections from visible nodes
        if (!node.isVisible) return;
        
        node.connections.forEach((toIndex: number) => {
          const toNode = nodes[toIndex];
          
          // If the target node is visible, draw the full connection
          if (toNode.isVisible) {
            drawConnection(fromIndex, toIndex, 1.0); // 1.0 = full line
          }
        });
      });
      
      // Draw the animating connection if there is one
      if (currentAnimatingConnectionRef.current) {
        const conn = currentAnimatingConnectionRef.current;
        drawConnection(conn.fromNodeIndex, conn.toNodeIndex, conn.progress);
      }
      
      // Draw visible nodes
      nodes.forEach((node: DiagramNode, index: number) => {
        if (!node.isVisible) return;
        
        ctx.save();
        
        // Create a pulsing effect
        const pulse = 1 + Math.sin(timeRef.current * 2 + node.angle) * 0.1;
        const size = node.size * pulse;
        
        // Set shadow for nodes
        ctx.shadowColor = isDark ? 'rgba(228, 217, 255, 0.5)' : 'rgba(39, 52, 105, 0.5)';
        ctx.shadowBlur = 5;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
        
        // Fill color based on node type
        ctx.fillStyle = node.color;
        
        // Draw different node shapes based on type
        switch (node.type) {
          case 'circle':
            ctx.beginPath();
            ctx.arc(node.x, node.y, size, 0, Math.PI * 2);
            ctx.closePath();
            ctx.fill();
            break;
          case 'diamond':
            ctx.beginPath();
            ctx.moveTo(node.x, node.y - size);
            ctx.lineTo(node.x + size, node.y);
            ctx.lineTo(node.x, node.y + size);
            ctx.lineTo(node.x - size, node.y);
            ctx.closePath();
            ctx.fill();
            break;
          case 'rect':
            ctx.fillRect(node.x - size, node.y - size * 0.7, size * 2, size * 1.4);
            break;
          case 'hexagon':
            ctx.beginPath();
            for (let i = 0; i < 6; i++) {
              const angle = (Math.PI / 3) * i;
              const x = node.x + size * Math.cos(angle);
              const y = node.y + size * Math.sin(angle);
              if (i === 0) ctx.moveTo(x, y);
              else ctx.lineTo(x, y);
            }
            ctx.closePath();
            ctx.fill();
            break;
        }
        
        // Draw node label
        if (node.label) {
          ctx.shadowColor = 'transparent';
          ctx.fillStyle = isDark ? '#fff' : '#30343F';
          ctx.font = '8px var(--font-roboto-mono)';
          ctx.textAlign = 'center';
          ctx.textBaseline = 'middle';
          ctx.fillText(node.label, node.x, node.y);
        }
        
        ctx.restore();
      });
    };

    const updateDiagram = () => {
      const currentTime = Date.now();
      timeRef.current += 0.01;
      
      const nodes = nodesRef.current;
      if (!nodes) return;
      
      // Get the sequence to animate
      const nodeSequence = nodeSequenceRef.current;
      const sequenceIndex = sequenceIndexRef.current;
      
      // Calculate elapsed time
      const buildTimeElapsed = currentTime - buildStartTimeRef.current;
      
      // If we're not yet animating a connection and we have more nodes to show
      if (!currentAnimatingConnectionRef.current && sequenceIndex < nodeSequence.length - 1) {
        const currentNodeIndex = nodeSequence[sequenceIndex];
        const nextNodeIndex = nodeSequence[sequenceIndex + 1];
        
        // Time to start a new connection animation
        const timeToStartNextConnection = sequenceIndex * nodeBuildDelayMs;
        
        if (buildTimeElapsed >= timeToStartNextConnection) {
          // Make the source node visible
          nodes[currentNodeIndex].isVisible = true;
          
          // Connect the nodes
          if (!nodes[currentNodeIndex].connections.includes(nextNodeIndex)) {
            nodes[currentNodeIndex].connections.push(nextNodeIndex);
          }
          
          // Start animating the next connection
          currentAnimatingConnectionRef.current = {
            fromNodeIndex: currentNodeIndex,
            toNodeIndex: nextNodeIndex,
            progress: 0,
            startTime: currentTime
          };
        }
      }
      
      // Update animating connection if there is one
      if (currentAnimatingConnectionRef.current) {
        const conn = currentAnimatingConnectionRef.current;
        const animElapsed = currentTime - conn.startTime;
        const normalizedProgress = Math.min(1, animElapsed / connectionAnimDurationMs);
        
        conn.progress = normalizedProgress;
        
        // When connection is complete, show the next node
        if (normalizedProgress >= 1) {
          // Make the destination node visible
          nodes[conn.toNodeIndex].isVisible = true;
          
          // Move to the next node in sequence
          sequenceIndexRef.current++;
          
          // Clear current animation
          currentAnimatingConnectionRef.current = null;
        }
      }
      
      // Animate visible nodes
      nodes.forEach((node, index) => {
        if (!node.isVisible) return;
        
        // Small orbital motion
        node.angle += node.speed * 0.01;
        
        const orbitRadius = 12; // Smaller orbits for tighter movement
        const orbitX = Math.cos(node.angle) * orbitRadius;
        const orbitY = Math.sin(node.angle) * orbitRadius;
        
        // Check for mouse interaction
        const mouseX = mousePositionRef.current.x;
        const mouseY = mousePositionRef.current.y;
        
        if (mouseX !== 0 && mouseY !== 0) {
          const dx = mouseX - node.x;
          const dy = mouseY - node.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 150) {
            // Temporary attraction/repulsion based on node type
            const force = 0.05 * (1 - distance / 150);
            node.x += dx * force * (node.type === 'diamond' ? -0.5 : 0.5);
            node.y += dy * force * (node.type === 'rect' ? -0.5 : 0.5);
          }
        }
        
        // Gently move nodes in small orbits
        node.x += orbitX * 0.02;
        node.y += orbitY * 0.02;
        
        // Keep nodes on screen with soft borders
        const padding = 30; // Tighter padding for more usable space
        if (node.x < padding) node.x += (padding - node.x) * 0.02;
        if (node.x > canvas.width - padding) node.x -= (node.x - (canvas.width - padding)) * 0.02;
        if (node.y < padding) node.y += (padding - node.y) * 0.02;
        if (node.y > canvas.height - padding) node.y -= (node.y - (canvas.height - padding)) * 0.02;
      });
    };

    const animate = () => {
      updateDiagram();
      drawDiagram();
      animationFrameRef.current = requestAnimationFrame(animate);
    };

    const handleMouseMove = (e: MouseEvent) => {
      mousePositionRef.current = {
        x: e.clientX,
        y: e.clientY
      };
    };

    const handleMouseLeave = () => {
      mousePositionRef.current = { x: 0, y: 0 };
    };

    // Set initial sizes
    handleResize();
    
    // Add event listeners
    window.addEventListener('resize', handleResize);
    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('mouseleave', handleMouseLeave);
    
    // Start animation
    animationFrameRef.current = requestAnimationFrame(animate);
    
    // Cleanup event listeners on unmount
    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseleave', handleMouseLeave);
    };
  }, [resolvedTheme]); // Re-initialize when theme changes

  return (
    <canvas
      ref={canvasRef}
      className="absolute inset-0 w-full h-full -z-10"
    />
  );
};

export default ParticleBackground;
